//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Simple_randomizer_SoC.Language {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class en_local {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal en_local() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Simple_randomizer_SoC.Language.en_local", typeof(en_local).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error applying additional parameters.
        /// </summary>
        internal static string advancedParamsError {
            get {
                return ResourceManager.GetString("advancedParamsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Advanced.
        /// </summary>
        internal static string advancedTab {
            get {
                return ResourceManager.GetString("advancedTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The program can theoretically be used with many mods (if the mod does not violate the logic of the original game files).
        ///
        ///To work with the mod , you need to in the folder ./rndata/default/gamedata/config in the &quot;gameplay&quot;, &quot;misc&quot;, &quot;weathers&quot; and &quot;weapons&quot; directories, replace the necessary files with modified ones (if necessary, make a backup copy of the original files). After that, you should correct the lists in accordance with the content of the mod.
        ///
        ///If there are additional models and NPC voice acti [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string advancedText {
            get {
                return ResourceManager.GetString("advancedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cartridges and its num. in a pack.
        /// </summary>
        internal static string ammoListTitle {
            get {
                return ResourceManager.GetString("ammoListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Artefacts.
        /// </summary>
        internal static string artefacts {
            get {
                return ResourceManager.GetString("artefacts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path for saving artifacts is not specified. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string artefactsDataError {
            get {
                return ResourceManager.GetString("artefactsDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Artifact generation error. Operation aborted.
        /// </summary>
        internal static string artefactsError {
            get {
                return ResourceManager.GetString("artefactsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable the alarm in the Bar when a player kills someone.
        /// </summary>
        internal static string barAlarm {
            get {
                return ResourceManager.GetString("barAlarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Caches.
        /// </summary>
        internal static string caches {
            get {
                return ResourceManager.GetString("caches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data for generating caches was not received. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string cachesDataError {
            get {
                return ResourceManager.GetString("cachesDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error generating caches. Operation aborted.
        /// </summary>
        internal static string cachesError {
            get {
                return ResourceManager.GetString("cachesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Cancel.
        /// </summary>
        internal static string cancel {
            get {
                return ResourceManager.GetString("cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Change the grouping of NPCs.
        /// </summary>
        internal static string changeCommunity {
            get {
                return ResourceManager.GetString("changeCommunity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Groupings.
        /// </summary>
        internal static string communityListTitle {
            get {
                return ResourceManager.GetString("communityListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Consumables.
        /// </summary>
        internal static string consumableListTitle {
            get {
                return ResourceManager.GetString("consumableListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Copy error.
        /// </summary>
        internal static string copyError {
            get {
                return ResourceManager.GetString("copyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Items of killed NPCs.
        /// </summary>
        internal static string deathItems {
            get {
                return ResourceManager.GetString("deathItems", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path to save the files of the items of the killed NPCs was not obtained. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string deathItemsDataError {
            get {
                return ResourceManager.GetString("deathItemsDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error generating items of killed NPCs. Operation aborted.
        /// </summary>
        internal static string deathItemsError {
            get {
                return ResourceManager.GetString("deathItemsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Default lists.
        /// </summary>
        internal static string defaultLists {
            get {
                return ResourceManager.GetString("defaultLists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error.
        /// </summary>
        internal static string error {
            get {
                return ResourceManager.GetString("error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Exceptions.
        /// </summary>
        internal static string exceptionListTitle {
            get {
                return ResourceManager.GetString("exceptionListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Disable the hostility of the Freedom base if there are NPCs hostile to the player on it.
        /// </summary>
        internal static string freedomAgression {
            get {
                return ResourceManager.GetString("freedomAgression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Funny russian translation.
        /// </summary>
        internal static string funnyTranslate {
            get {
                return ResourceManager.GetString("funnyTranslate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Generate.
        /// </summary>
        internal static string generate {
            get {
                return ResourceManager.GetString("generate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Use only GENERATE_NAME.
        /// </summary>
        internal static string generateNameOnlyCheckBox {
            get {
                return ResourceManager.GetString("generateNameOnlyCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Fix (possible, but not all) crashes during a long game at late locations.
        /// </summary>
        internal static string gScriptFix {
            get {
                return ResourceManager.GetString("gScriptFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Help.
        /// </summary>
        internal static string guideFormName {
            get {
                return ResourceManager.GetString("guideFormName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Miniatures.
        /// </summary>
        internal static string iconListTitle {
            get {
                return ResourceManager.GetString("iconListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Warning.
        /// </summary>
        internal static string infoFornName {
            get {
                return ResourceManager.GetString("infoFornName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на All lists on this tab are used only for adding items to caches.
        ///
        ///Armor and artifact stats are generated in the files &quot;outfit.ltx&quot; and &quot;artefacts.ltx&quot;
        ///(directory ./rndata/gamedata/config/misc) and does not depend on these lists
        ///
        ///Rules for generating items in caches.
        ///Number of items from 1 to 7 (Each item is selected randomly and can be repeated)
        ///Probability of generating an item by type:
        ///Armor - 5%, 1 pc.
        ///Weapons - 10%, 1 pc.
        ///Artifact - 5%, 1-2 pcs.
        ///Consumables - 50%, 1-8 pcs.
        ///Cartridges - 25%, 1 [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string ItemsGuide {
            get {
                return ResourceManager.GetString("ItemsGuide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Items.
        /// </summary>
        internal static string ItemsTab {
            get {
                return ResourceManager.GetString("ItemsTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Give the player a knife at the beginning of the game.
        /// </summary>
        internal static string knifeAtStart {
            get {
                return ResourceManager.GetString("knifeAtStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The following files could not be loaded:.
        /// </summary>
        internal static string loadError {
            get {
                return ResourceManager.GetString("loadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Load lists.
        /// </summary>
        internal static string loadLists {
            get {
                return ResourceManager.GetString("loadLists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Simple randomizer for &quot;S.T.A.L.K.E.R.: Shadow of Chernobyl&quot;.
        /// </summary>
        internal static string mainFormName {
            get {
                return ResourceManager.GetString("mainFormName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Models.
        /// </summary>
        internal static string modelListTitle {
            get {
                return ResourceManager.GetString("modelListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Expand the joining of NPCs to camps (breaks some scripts, but the plot is passable).
        /// </summary>
        internal static string moreGulag {
            get {
                return ResourceManager.GetString("moreGulag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Increase the frequency of NPC respawn (May be unstable).
        /// </summary>
        internal static string moreRespawn {
            get {
                return ResourceManager.GetString("moreRespawn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Names.
        /// </summary>
        internal static string nameListTitle {
            get {
                return ResourceManager.GetString("nameListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data for the generation of NPCs were not received. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string npcDataError {
            get {
                return ResourceManager.GetString("npcDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на NPC generation error. Operation aborted.
        /// </summary>
        internal static string npcError {
            get {
                return ResourceManager.GetString("npcError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Manipulations with NPCs (especially when changing groupings) can increase the probability of a crash
        ///Also, when NPC generation is enabled, it is not recommended to go to the rating tab in the PDA
        ///
        ///List of models:
        ///Used to issue a random NPC model. The paths to the models are written from the &quot;gamedata/meshes&quot; folder.
        ///There is no need to read and edit the models themselves. To change the available NPC models, it is enough
        ///to change the list without copying the model files themselves anywhere
        ///
        ///Voice ac [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string npcGuide {
            get {
                return ResourceManager.GetString("npcGuide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rules for generating NPCs have not been received. A call to &quot;updateRules&quot; is required.
        /// </summary>
        internal static string npcRulesError {
            get {
                return ResourceManager.GetString("npcRulesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на NPC.
        /// </summary>
        internal static string npcTab {
            get {
                return ResourceManager.GetString("npcTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на More....
        /// </summary>
        internal static string other {
            get {
                return ResourceManager.GetString("other", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Other.
        /// </summary>
        internal static string otherListTitle {
            get {
                return ResourceManager.GetString("otherListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Armor.
        /// </summary>
        internal static string outfits {
            get {
                return ResourceManager.GetString("outfits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The path to save the armor is not specified. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string outfitsDataError {
            get {
                return ResourceManager.GetString("outfitsDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Armor generation error. Operation aborted.
        /// </summary>
        internal static string outfitsError {
            get {
                return ResourceManager.GetString("outfitsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The following files will be overwritten:.
        /// </summary>
        internal static string overwritingFiles {
            get {
                return ResourceManager.GetString("overwritingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The probability of rain for each weather class.
        /// </summary>
        internal static string rainProbability {
            get {
                return ResourceManager.GetString("rainProbability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rank.
        /// </summary>
        internal static string rank {
            get {
                return ResourceManager.GetString("rank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Read or process error.
        /// </summary>
        internal static string readHandleError {
            get {
                return ResourceManager.GetString("readHandleError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на (Recommended).
        /// </summary>
        internal static string recommended {
            get {
                return ResourceManager.GetString("recommended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sounds of reloading.
        /// </summary>
        internal static string reloadSoundListTitle {
            get {
                return ResourceManager.GetString("reloadSoundListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Reputation.
        /// </summary>
        internal static string reputation {
            get {
                return ResourceManager.GetString("reputation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Saved to the folder:.
        /// </summary>
        internal static string savedIn {
            get {
                return ResourceManager.GetString("savedIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The following files could not be saved:.
        /// </summary>
        internal static string saveError {
            get {
                return ResourceManager.GetString("saveError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Saving.
        /// </summary>
        internal static string saveFormName {
            get {
                return ResourceManager.GetString("saveFormName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Save lists.
        /// </summary>
        internal static string saveLists {
            get {
                return ResourceManager.GetString("saveLists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Select all.
        /// </summary>
        internal static string selectAll {
            get {
                return ResourceManager.GetString("selectAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sounds of shooting.
        /// </summary>
        internal static string shootSoundListTitle {
            get {
                return ResourceManager.GetString("shootSoundListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Additionally shuffle the entire text.
        /// </summary>
        internal static string shuffleText {
            get {
                return ResourceManager.GetString("shuffleText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Sky.
        /// </summary>
        internal static string skyboxListTitle {
            get {
                return ResourceManager.GetString("skyboxListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Voice acting.
        /// </summary>
        internal static string soundListTitle {
            get {
                return ResourceManager.GetString("soundListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error reading game text files.
        /// </summary>
        internal static string textDataReadError {
            get {
                return ResourceManager.GetString("textDataReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Thunderstorm Effects.
        /// </summary>
        internal static string thunderListTitle {
            get {
                return ResourceManager.GetString("thunderListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The probability of a thunderstorm for each weather class.
        /// </summary>
        internal static string thunderProbability {
            get {
                return ResourceManager.GetString("thunderProbability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The opportunity to get weapons in the bar, in the scientists&apos; bunker and at Sidorovich&apos;s.
        /// </summary>
        internal static string weaponEverywhere {
            get {
                return ResourceManager.GetString("weaponEverywhere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на List of weapons and cartridges used:
        ///
        ///It is used to add weapons to caches and issue weapons to NPCs. The type of cartridges is necessary
        ///to add to the NPCs so that the people have ammunition to recharge.
        ///
        ///List of cartridges and quantities in one pack:
        ///It is used to add cartridges to caches. The number of cartridges in a pack is necessary
        ///to eliminate the imbalance between the generations of different types of cartridges
        ///So, if you generate cleanly in the range from 1 to 100, you can get 80 RPG rocke [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string weaponGuide {
            get {
                return ResourceManager.GetString("weaponGuide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weapons and cartridges used by them.
        /// </summary>
        internal static string weaponListTitle {
            get {
                return ResourceManager.GetString("weaponListTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The data for generating weapons were not received. An &quot;updateData&quot; call is required.
        /// </summary>
        internal static string weaponsDataError {
            get {
                return ResourceManager.GetString("weaponsDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weapon generation error. Operation aborted.
        /// </summary>
        internal static string weaponsError {
            get {
                return ResourceManager.GetString("weaponsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weapon.
        /// </summary>
        internal static string weaponsTab {
            get {
                return ResourceManager.GetString("weaponsTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data for weather generation was not received. Operation aborted.
        /// </summary>
        internal static string weatherDataError {
            get {
                return ResourceManager.GetString("weatherDataError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weather generation error. Operation aborted.
        /// </summary>
        internal static string weatherError {
            get {
                return ResourceManager.GetString("weatherError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на A change in the weather mainly affects the color of the environment, therefore it may not be very pleasant.
        ///But the game will complement the RGB gaming keyboard and mouse well.
        /// </summary>
        internal static string weatherHelp {
            get {
                return ResourceManager.GetString("weatherHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weather.
        /// </summary>
        internal static string weatherTab {
            get {
                return ResourceManager.GetString("weatherTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на What to generate:.
        /// </summary>
        internal static string whatGenerate {
            get {
                return ResourceManager.GetString("whatGenerate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Writing or processing error.
        /// </summary>
        internal static string writeHandleError {
            get {
                return ResourceManager.GetString("writeHandleError", resourceCulture);
            }
        }
    }
}
